{"version":3,"sources":["main.js"],"names":["Site","mobileThreshold","init","_this","this","$","window","resize","onResize","document","ready","Video","fixWidows","each","string","html","replace","playing","toPlay","$container","$videos","$video1","$video2","on","handleCanPlayThrough","bind","canAutoplay","threshold","Waypoint","element","handler","handleWaypoint","offset","enabled","enable","bindWaypoint","direction","playAndSwitch","$videoToPlay","console","log","play","event","off","removeClass","addClass","position","pause","WP","wp_debug","notHidden","filter","text","id"],"mappings":"AAGAA,MACEC,gBAAiB,IACjBC,KAAM,WACJ,GAAIC,OAAQC,IAEZC,GAAEC,QAAQC,OAAO,WACfJ,MAAMK,aAGRH,EAAEI,UAAUC,MAAM,WAChBP,MAAMQ,MAAMT,UAKhBM,SAAU,aAKVI,UAAW,WAETP,EAAE,kBAAkBQ,KAAK,WACvB,GAAIC,QAAST,EAAED,MAAMW,MACrBD,QAASA,OAAOE,QAAQ,YAAY,YACpCX,EAAED,MAAMW,KAAKD,YAKnBd,KAAKW,OACHM,SAAS,EACTC,OAAQ,EACRhB,KAAO,WACL,GAAIC,OAAQC,IAEZD,OAAMgB,WAAad,EAAE,2BAGrBF,MAAMiB,QAAUf,EAAE,iBAClBF,MAAMkB,QAAUhB,EAAE,mBAClBF,MAAMmB,QAAUjB,EAAE,mBAElBF,MAAMkB,QAAQE,GAAG,iBAAkBpB,MAAMqB,qBAAqBC,KAAKtB,QAGnEA,MAAMuB,aAAc,EAGpBvB,MAAMwB,UAAY,IAGlBxB,MAAMyB,SAAW,GAAIA,WACnBC,QAAS1B,MAAMgB,WAAW,GAC1BW,QAAS3B,MAAM4B,eAAeN,KAAKrB,MACnC4B,QAAS,IACTC,SAAS,KAKbT,qBAAsB,WACRpB,KAGNwB,SAASM,UAGjBC,aAAc,aAKdJ,eAAgB,SAASK,WACvB,GAAIjC,OAAQC,IAGTD,OAAMuB,cAAgBvB,MAAMc,UACb,QAAbmB,UACDjC,MAAMkC,cAAclC,MAAMkB,SACJ,OAAde,WACRjC,MAAMkC,cAAclC,MAAMmB,WAKhCe,cAAe,SAASC,cACtB,GAAInC,OAAQC,IAEZmC,SAAQC,IAAI,UAAWF,cAGvBA,aAAa,GAAGG,OAGhBtC,MAAMc,SAAU,EAGhBqB,aAAaf,GAAG,QAAS,SAASmB,OAiBhC,GAfAJ,aAAaK,IAAI,SAGjBxC,MAAMc,SAAU,EAGhBd,MAAMiB,QAAQwB,YAAY,YAC1BN,aAAaO,SAAS,YAGtBP,aAAa,GAAGQ,SAAW,EAC3BR,aAAa,GAAGG,OAChBH,aAAa,GAAGS,QAGbC,GAAGC,SAAU,CACd,GAAIC,WAAY/C,MAAMiB,QAAQ+B,OAAO,kBACrC9C,GAAE,oBAAoB+C,KAAKF,UAAU,GAAGG,SAOhDrD,KAAKE","file":"main.min.js","sourcesContent":["/* jshint browser: true, devel: true, indent: 2, curly: true, eqeqeq: true, futurehostile: true, latedef: true, undef: true, unused: true */\n/* global $, jQuery, document, Site, Modernizr */\n\nSite = {\n  mobileThreshold: 601,\n  init: function() {\n    var _this = this;\n\n    $(window).resize(function(){\n      _this.onResize();\n    });\n\n    $(document).ready(function () {\n      _this.Video.init();\n    });\n\n  },\n\n  onResize: function() {\n    var _this = this;\n\n  },\n\n  fixWidows: function() {\n    // utility class mainly for use on headines to avoid widows [single words on a new line]\n    $('.js-fix-widows').each(function(){\n      var string = $(this).html();\n      string = string.replace(/ ([^ ]*)$/,'&nbsp;$1');\n      $(this).html(string);\n    });\n  },\n};\n\nSite.Video = {\n  playing: false,\n  toPlay: 0,\n  init:  function() {\n    var _this = this;\n\n    _this.$container = $('#splash-video-container');\n\n    // Selector for both videos\n    _this.$videos = $('.splash-video');\n    _this.$video1 = $('#splash-video-1');\n    _this.$video2 = $('#splash-video-2');\n\n    _this.$video1.on('canplaythrough', _this.handleCanPlayThrough.bind(_this));\n\n    // TODO: Detect can autoplay\n    _this.canAutoplay = true;\n\n    // TODO: Get threshold based on video position/margin/something\n    _this.threshold = 100;\n\n    // Create waypoint\n    _this.Waypoint = new Waypoint({\n      element: _this.$container[0],\n      handler: _this.handleWaypoint.bind(this),\n      offset: -300,\n      enabled: false,\n    });\n\n  },\n\n  handleCanPlayThrough: function() {\n    var _this = this;\n\n    // Bind scroll\n    _this.Waypoint.enable();\n  },\n\n  bindWaypoint: function() {\n    var _this = this;\n\n  },\n\n  handleWaypoint: function(direction) {\n    var _this = this;\n\n    // Check if browser can autoplay and it's not playing\n    if(_this.canAutoplay && !_this.playing) {\n      if(direction == 'down') { // First video is to play and postition is below threshold\n        _this.playAndSwitch(_this.$video1);\n      } else if(direction === 'up') { // second video is to play and postition is above threshold * 0.8. Value was made up, it will change based on design\n        _this.playAndSwitch(_this.$video2);\n      }\n    }\n  },\n\n  playAndSwitch: function($videoToPlay) {\n    var _this = this;\n\n    console.log('playing', $videoToPlay);\n\n    // Play video\n    $videoToPlay[0].play();\n\n    // Set playing to true\n    _this.playing = true;\n\n    // Listen for video ended event\n    $videoToPlay.on('ended', function(event) {\n      // Remove event\n      $videoToPlay.off('ended');\n\n      // Set playing to false\n      _this.playing = false;\n\n      // Switch videos\n      _this.$videos.removeClass('u-hidden');\n      $videoToPlay.addClass('u-hidden');\n\n      // Reset position to 0\n      $videoToPlay[0].position = 0;\n      $videoToPlay[0].play();\n      $videoToPlay[0].pause();\n\n      // DEBUG\n      if(WP.wp_debug) {\n        var notHidden = _this.$videos.filter(':not(.u-hidden)');\n        $('#video-displayed').text(notHidden[0].id);\n      }\n\n    });\n  },\n};\n\nSite.init();\n"]}